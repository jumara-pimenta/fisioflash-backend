# Generated by Django 5.1.2 on 2024-10-10 23:23

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import re
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Servico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('especialidade', models.CharField(db_column='especialidade', max_length=100)),
            ],
            options={
                'db_table': 'servico',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(help_text='Required. 15 characters or fewer. Letters, numbers and @/./+/-/_ characters', max_length=15, unique=True, validators=[django.core.validators.RegexValidator(re.compile('^[\\w.@+-]+$'), 'Enter a valid username.', 'invalid')], verbose_name='username')),
                ('first_name', models.CharField(max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(max_length=30, verbose_name='last name')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.CharField(choices=[('PAC', 'Paciente'), ('FIS', 'Fisioterapeuta')], default='PAC', max_length=3, verbose_name='User Type')),
                ('cpf', models.CharField(db_column='cpf', max_length=11, unique=True)),
                ('rg', models.CharField(db_column='rg', max_length=10, unique=True)),
                ('telefone', models.CharField(db_column='telefone', max_length=15)),
                ('rua', models.CharField(db_column='rua', max_length=255)),
                ('numero', models.CharField(db_column='numero', max_length=10)),
                ('bairro', models.CharField(db_column='bairro', max_length=100)),
                ('cep', models.CharField(db_column='cep', max_length=8)),
                ('data_nascimento', models.DateField(db_column='data_nascimento')),
                ('registro_profissional', models.CharField(blank=True, db_column='registro_profissional', max_length=20, null=True, unique=True)),
                ('especializacoes', models.TextField(blank=True, db_column='especializacoes', null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
        ),
        migrations.CreateModel(
            name='ServicoFisioterapeuta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('fisioterapeuta', models.ForeignKey(db_column='fisioterapeuta_id', limit_choices_to={'user_type': 'FIS'}, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('servico', models.ForeignKey(db_column='servico_id', on_delete=django.db.models.deletion.CASCADE, to='clinica.servico')),
            ],
            options={
                'db_table': 'servico_fisioterapeuta',
            },
        ),
        migrations.CreateModel(
            name='CasoClinico',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descricao', models.TextField(db_column='descricao')),
                ('situacao', models.CharField(choices=[('Pendente', 'Pendente'), ('Em tratamento', 'Em tratamento'), ('Concluído', 'Concluído'), ('Recusado', 'Recusado')], db_column='situacao', default='Pendente', max_length=20)),
                ('paciente', models.ForeignKey(db_column='paciente_id', limit_choices_to={'user_type': 'PAC'}, on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
                ('servico_fisioterapeuta', models.ForeignKey(db_column='servico_fisioterapeuta_id', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='clinica.servicofisioterapeuta')),
            ],
            options={
                'db_table': 'caso_clinico',
            },
        ),
    ]
